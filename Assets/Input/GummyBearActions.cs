//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/GummyBearActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GummyBearActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GummyBearActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GummyBearActions"",
    ""maps"": [
        {
            ""name"": ""GummyBearTest"",
            ""id"": ""566b1b75-dc65-4663-a732-97ccc6107760"",
            ""actions"": [
                {
                    ""name"": ""StretchHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""8feda822-381a-482a-830d-695968de84b3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0d8d7aea-ee16-4d47-9620-f50802f9ff5e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StretchVertical"",
                    ""type"": ""Button"",
                    ""id"": ""2e24121f-86eb-491b-8d4f-af4761861df1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""712f86a7-0eae-40aa-b871-58a5f72ef701"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StretchHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d7bd4e8-bb82-4072-8729-ad9e3e538cd2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StretchHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1ca7810c-c8c4-48b2-8c0a-cd397fdc0490"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d8d1f60-cfd8-4a36-86a9-b4c6995a403a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""20f5f231-f44f-4a3e-ae3d-5b05cf5b18b4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""98412e07-e464-4757-836f-105489e4b4b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8e101f40-f07a-4865-bf01-e8c315445370"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40071ed9-d691-4e26-afe5-744e08164de9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StretchVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfbb6648-99f9-4d71-8c9b-46d1cd736cd6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StretchVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GummyBearTest
        m_GummyBearTest = asset.FindActionMap("GummyBearTest", throwIfNotFound: true);
        m_GummyBearTest_StretchHorizontal = m_GummyBearTest.FindAction("StretchHorizontal", throwIfNotFound: true);
        m_GummyBearTest_Move = m_GummyBearTest.FindAction("Move", throwIfNotFound: true);
        m_GummyBearTest_StretchVertical = m_GummyBearTest.FindAction("StretchVertical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GummyBearTest
    private readonly InputActionMap m_GummyBearTest;
    private List<IGummyBearTestActions> m_GummyBearTestActionsCallbackInterfaces = new List<IGummyBearTestActions>();
    private readonly InputAction m_GummyBearTest_StretchHorizontal;
    private readonly InputAction m_GummyBearTest_Move;
    private readonly InputAction m_GummyBearTest_StretchVertical;
    public struct GummyBearTestActions
    {
        private @GummyBearActions m_Wrapper;
        public GummyBearTestActions(@GummyBearActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StretchHorizontal => m_Wrapper.m_GummyBearTest_StretchHorizontal;
        public InputAction @Move => m_Wrapper.m_GummyBearTest_Move;
        public InputAction @StretchVertical => m_Wrapper.m_GummyBearTest_StretchVertical;
        public InputActionMap Get() { return m_Wrapper.m_GummyBearTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GummyBearTestActions set) { return set.Get(); }
        public void AddCallbacks(IGummyBearTestActions instance)
        {
            if (instance == null || m_Wrapper.m_GummyBearTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GummyBearTestActionsCallbackInterfaces.Add(instance);
            @StretchHorizontal.started += instance.OnStretchHorizontal;
            @StretchHorizontal.performed += instance.OnStretchHorizontal;
            @StretchHorizontal.canceled += instance.OnStretchHorizontal;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @StretchVertical.started += instance.OnStretchVertical;
            @StretchVertical.performed += instance.OnStretchVertical;
            @StretchVertical.canceled += instance.OnStretchVertical;
        }

        private void UnregisterCallbacks(IGummyBearTestActions instance)
        {
            @StretchHorizontal.started -= instance.OnStretchHorizontal;
            @StretchHorizontal.performed -= instance.OnStretchHorizontal;
            @StretchHorizontal.canceled -= instance.OnStretchHorizontal;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @StretchVertical.started -= instance.OnStretchVertical;
            @StretchVertical.performed -= instance.OnStretchVertical;
            @StretchVertical.canceled -= instance.OnStretchVertical;
        }

        public void RemoveCallbacks(IGummyBearTestActions instance)
        {
            if (m_Wrapper.m_GummyBearTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGummyBearTestActions instance)
        {
            foreach (var item in m_Wrapper.m_GummyBearTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GummyBearTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GummyBearTestActions @GummyBearTest => new GummyBearTestActions(this);
    public interface IGummyBearTestActions
    {
        void OnStretchHorizontal(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnStretchVertical(InputAction.CallbackContext context);
    }
}
